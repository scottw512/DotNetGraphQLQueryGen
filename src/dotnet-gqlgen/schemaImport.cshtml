@{
    DisableEncoding = true;
}
@using dotnet_gqlgen;

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using DotNetGqlClient;

/// <summary>
    /// Generated interfaces for making GraphQL API calls with a typed interface.
    ///
    /// Generated on @DateTime.Now from @Model.SchemaFile @Model.CmdArgs
    ///
</summary>

namespace @Model.Namespace
{

@foreach (var kvp in Model.Enums)
{
    @:public enum @kvp.Key {
    @foreach (var field in kvp.Value)
    {
        @:@field.DotNetName,
    }
    @:}
}

@foreach (var gqlType in Model.Types.Values)
{
    @:public class @gqlType.Name
    @:{
    @foreach (var field in gqlType.Fields)
    {
        @if (field.ShouldBeProperty || gqlType.IsInput)
        {
            @:public @field.DotNetType @field.Name { get; set; }
        }
        else
        {
            var shortcutOutput = field.OutputMethodSignature(true, false);

            @if (gqlType != Model.Mutation && shortcutOutput != null)
            {
                @field.OutputMethodSignature(true, false)
            }

            @field.OutputMethodSignature(false, true)
        }
    }
    @:}

    public class $"{@gqlType.Name}Type : ObjectGraphType<@gqlType.Name>"
    {
public $"{@gqlType.Name}Type()"
@:{
    $"Name = nameof({gqlType.Name}Type);"
               @foreach(var field in gqlType.Fields)
               {
        @if (field.ShouldBeProperty || gqlType.IsInput)
        {
            @:public @field.DotNetType @field.Name { get; set; }
        }
        else
        {
            var shortcutOutput = field.OutputMethodSignature(true, false);

            @if (gqlType != Model.Mutation && shortcutOutput != null)
            {
                @field.OutputMethodSignature(true, false)
            }

            @field.OutputMethodSignature(false, true)
        }
        }
    }
    @:}
}
